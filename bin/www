#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('ListenUp:server');

// A lot the the functions used here are actually defined in this file
var mod = require('../own_modules/mod');

var server = require('http').createServer(app);
var io = require('socket.io')(server);

// Creating variables //
var soundbank = mod.soundbank;
var playlist = mod.playlist;


var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

// Creates the server that listens to the port 80
server.listen(port, function(){
	console.log('Listening on *:'+port);
}); 
server.on('error', onError);
server.on('listening', onListening);

var currentSong = "No song in the playlist";

// Handles Socket.io interactions
// Socket.io is also used to talk with the server, ex: wether to play a song or not
io.on('connection', function(socket){ 

	io.emit('chat message', socket.id+" connected");

	io.emit('current song', currentSong);

	socket.on('disconnect', function(){
		io.emit('chat message', "A user deconnected");
	});

	socket.on('chat message', function(msg){
		console.log('message: ' + msg);
		io.emit('chat message', msg);
	});

	socket.on('server play next song', function(){
		if(typeof playlist[0] != "string"){
			io.emit("chat message", "No song, can't Play");
		}
		else{
			currentSong = playlist[0];
			mod.removeFromPlaylist(currentSong);
			io.emit('play', currentSong);
		}
	});
	socket.on('play', function(song){
		currentSong = song;
		io.emit('play', song);
	});

});

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
 	var port = parseInt(val, 10);

 	if (isNaN(port)) {
    // named pipe
    return val;
}

if (port >= 0) {
    // port number
    return port;
}

return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
 	if (error.syscall !== 'listen') {
 		throw error;
 	}

 	var bind = typeof port === 'string'
 	? 'Pipe ' + port
 	: 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  	case 'EACCES':
  	console.error(bind + ' requires elevated privileges');
  	process.exit(1);
  	break;
  	case 'EADDRINUSE':
  	console.error(bind + ' is already in use');
  	process.exit(1);
  	break;
  	default:
  	throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
 	var addr = server.address();
 	var bind = typeof addr === 'string'
 	? 'pipe ' + addr
 	: 'port ' + addr.port;
 	debug('Listening on ' + bind);
 }
